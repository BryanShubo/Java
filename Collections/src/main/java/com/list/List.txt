
1. An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted.
The user can access elements by their integer index (position in the list), and search for elements in the list.

2.Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2),
and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates,
by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.

3. The List interface places additional stipulations, beyond those specified in the Collection interface,
on the contracts of the iterator, add, remove, equals, and hashCode methods. Declarations for other inherited methods are also included here for convenience.

4. The List interface provides four methods for positional (indexed) access to list elements. Lists (like Java arrays) are zero based.
Note that these operations may execute in time proportional to the index value for some implementations (the LinkedList class, for example).
Thus, iterating over the elements in a list is typically preferable to indexing through it if the caller does not know the implementation.

5. The List interface provides a special iterator, called a ListIterator, that allows element insertion and replacement, and bidirectional access
in addition to the normal operations that the Iterator interface provides. A method is provided to obtain a list iterator that starts at a specified position in the list.

6. The List interface provides two methods to search for a specified object. From a performance standpoint, these methods should be used with caution.
In many implementations they will perform costly linear searches.

7. The List interface provides two methods to efficiently insert and remove multiple elements at an arbitrary point in the list.

Note: While it is permissible for lists to contain themselves as elements, extreme caution is advised: the equals and hashCode methods are no longer well defined on such a list.


II. methods

1. boolean	add(E e) Appends the specified element to the end of this list (optional operation).
2. void	add(int index, E element) Inserts the specified element at the specified position in this list (optional operation).
3. boolean	addAll(Collection<? extends E> c) Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).
4. boolean	addAll(int index, Collection<? extends E> c) Inserts all of the elements in the specified collection into this list at the specified position (optional operation).
5. void	clear() Removes all of the elements from this list (optional operation).
6. boolean	contains(Object o) Returns true if this list contains the specified element.
7. boolean	containsAll(Collection<?> c) Returns true if this list contains all of the elements of the specified collection.
8. boolean	equals(Object o) Compares the specified object with this list for equality.
9. E	get(int index) Returns the element at the specified position in this list.
10. int	hashCode() Returns the hash code value for this list.
11. int	indexOf(Object o) Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
12. boolean	isEmpty() Returns true if this list contains no elements.
13. Iterator<E>	iterator() Returns an iterator over the elements in this list in proper sequence.
14. int	lastIndexOf(Object o) Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
15. ListIterator<E>	listIterator() Returns a list iterator over the elements in this list (in proper sequence).
16. ListIterator<E>	listIterator(int index) Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.
17. E	remove(int index) Removes the element at the specified position in this list (optional operation).
18. boolean	remove(Object o) Removes the first occurrence of the specified element from this list, if it is present (optional operation).
19. boolean	removeAll(Collection<?> c) Removes from this list all of its elements that are contained in the specified collection (optional operation).
20. boolean	retainAll(Collection<?> c) Retains only the elements in this list that are contained in the specified collection (optional operation).
21. E	set(int index, E element) Replaces the element at the specified position in this list with the specified element (optional operation).
22. int	size() Returns the number of elements in this list.
23. List<E>	subList(int fromIndex, int toIndex) Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
24. Object[]	toArray() Returns an array containing all of the elements in this list in proper sequence (from first to last element).
25. <T> T[]	toArray(T[] a) Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.